#!/usr/bin/env python
# -*- coding: utf-8 -*-

#  Copyright 2023 Abdelkrime Aries <kariminfo0@gmail.com>
#
#  ---- AUTHORS ----
# 2023	Abdelkrime Aries <kariminfo0@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys, getopt
import os

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from jslML.preprocess.readers import parse_ud_conllu_file
from jslML.models.en_pos import eng_word_srf_encoder


def help():
    hlp = """sword_data_prepare [-i | --in] <file-name> [-o | --out] <file-name>:
    Read a list of files using URLs stored in the first file
        Then generate a CSV file containing the surface encoding of each word
    """
    print(hlp)


def main(argv):
    try:
        opts, args = getopt.getopt(argv,"hi:o:",["help", "in=", "out="])
    except getopt.GetoptError:
        help()
        sys.exit(2)

    inURL = None
    outURL = None

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            help()
            sys.exit()
        elif opt in ("-i", "--in"):
            inURL = arg
        elif opt in ("-o", "--out"):
            outURL = arg

    if inURL is None:
        print("You have to specify a file as input")
        sys.exit()
    elif not os.path.isfile(inURL):
        print("The input file does not exist")
        sys.exit()
    if outURL is None:
        print("You have to specify a file as output")
        sys.exit()

    f_out = open(outURL, "w", encoding="utf8")
    
    with open(inURL, "r", encoding="utf8") as f_in:
        for url_conllu in f_in:
            url_conllu = url_conllu.rstrip('\r\n\s')
            if len(url_conllu) < 2:
                continue
            for sent in parse_ud_conllu_file(url_conllu):
                for word, stem, pos in sent:
                    c = eng_word_srf_encoder(word)
                    sc = str(c)[1:-1].replace(" ", "")
                    f_out.write(f'{sc}\n')
    f_out.close()


if __name__ == "__main__":
    main(sys.argv[1:])